package com.rick.morty.screens

import androidx.compose.runtime.Composable
import com.rick.morty.business.MainViewModel

@Composable
fun InsertCharacterScreen(viewModel: MainViewModel, onCharacterInserted: () -> Unit) {
    // State for each text field
//    var characterName by remember { mutableStateOf("") }
//    var species by remember { mutableStateOf("") }
//    var gender by remember { mutableStateOf("") }
//    var status by remember { mutableStateOf("") }
//    var characterType by remember { mutableStateOf("") }
//    var imageUrl by remember { mutableStateOf("") }
//
//    // Create a new character entity to store the data
//    val newCharacter = CharacterEntity(
//        id = 0,  // This will be auto-generated by the database
//        name = characterName,
//        species = species,
//        gender = gender,
//        status = status,
//        type = characterType,
//        created = "2024-11-12", // For now, we use a placeholder date
//        image = imageUrl
//    )
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(16.dp),
//        verticalArrangement = Arrangement.spacedBy(16.dp)
//    ) {
//        // Title
//        Text(text = "Create a New Character", fontWeight = FontWeight.Bold, fontSize = 24.sp)
//
//        // Character Name
//        OutlinedTextField(
//            value = characterName,
//            onValueChange = { characterName = it },
//            label = { Text("Character Name") },
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        // Species
//        OutlinedTextField(
//            value = species,
//            onValueChange = { species = it },
//            label = { Text("Species") },
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        // Gender
//        OutlinedTextField(
//            value = gender,
//            onValueChange = { gender = it },
//            label = { Text("Gender") },
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        // Status
//        OutlinedTextField(
//            value = status,
//            onValueChange = { status = it },
//            label = { Text("Status") },
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        // Type
//        OutlinedTextField(
//            value = characterType,
//            onValueChange = { characterType = it },
//            label = { Text("Character Type") },
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        // Image URL (for now, just a text input for simplicity)
//        OutlinedTextField(
//            value = imageUrl,
//            onValueChange = { imageUrl = it },
//            label = { Text("Image URL") },
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        // Save button
//        Button(
//            onClick = {
//                if (characterName.isNotBlank() && species.isNotBlank() && gender.isNotBlank() && status.isNotBlank() && characterType.isNotBlank() && imageUrl.isNotBlank()) {
//                    viewModel.insertCharacter(newCharacter)  // Save the character to DB
//                    onCharacterInserted()  // Callback to navigate back or show a success message
//                } else {
//                    Toast.makeText(LocalContext.current, "All fields must be filled", Toast.LENGTH_SHORT).show()
//                }
//            },
//            modifier = Modifier.fillMaxWidth()
//        ) {
//            Text("Save Character")
//        }
//    }
}
